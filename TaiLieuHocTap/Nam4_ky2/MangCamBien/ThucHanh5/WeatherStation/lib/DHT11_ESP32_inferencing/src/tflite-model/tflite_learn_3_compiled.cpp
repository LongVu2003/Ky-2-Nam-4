/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.05.2025 08:45:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1504;
#else
constexpr int kTensorArenaSize = 480;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,14 } };
const TfArray<1, float> quant0_scale = { 1, { 0.36078432202339172, } };
const TfArray<1, int> quant0_zero = { 1, { -122 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1738, 508, 154, -1951, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00034772511571645737, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[4*64] = { 
  -23, -26, -59, 37, 31, 22, 21, 17, -14, 15, 31, -18, -29, -36, -37, -31, -22, 16, -24, 21, -22, 102, -11, 14, 9, 4, 11, 34, 27, -35, -34, -3, 19, 10, 36, 25, -26, -9, 2, -39, -14, -26, -18, 16, -18, -27, -40, -13, 21, 16, 0, -33, 24, 15, -29, -30, -1, 27, 1, -30, -16, 10, 3, -4, 
  -32, -34, -22, -15, -9, -3, -30, -28, 5, -7, 9, 4, 13, 12, -19, -8, -27, 9, 20, -12, 25, -112, 16, 20, -34, 18, 32, -32, 35, -6, 18, -33, 9, 9, -18, 4, -2, -17, 37, 2, -21, -12, -3, 8, 14, 21, -62, 18, 2, -14, 19, -21, -1, 14, -20, -27, 11, 4, -20, -27, -10, -7, 13, 10, 
  -15, -13, 24, -82, -35, 4, 14, -84, -2, -12, 3, 127, -2, 26, -23, 18, 24, -18, -4, -38, -96, 3, -27, -14, 15, -28, -33, -15, -14, 7, 26, -27, -5, -6, -9, -7, 27, 25, -72, 6, 2, 9, 27, -20, 0, -28, 45, -41, -18, -6, -4, 4, 0, -3, 34, -33, -16, -52, -7, -3, 8, 17, -21, 1, 
  -22, -16, 41, -2, -17, 8, 17, 30, 6, 5, 0, -15, 31, -2, -12, 28, 3, 22, -20, 19, -1, -48, -15, 28, -10, 18, 32, -32, -26, 3, -3, 16, 20, 20, -22, -13, 40, -17, -15, 13, 10, 16, 10, 23, 12, -5, 61, -9, -37, -3, 9, 5, 14, 15, 8, 10, 20, -2, -8, -16, 24, -26, -15, -16, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,64 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0086059644818305969, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[64] = { -279, -209, -2886, 1403, 1629, 856, 381, -681, -57, -184, -46, 900, -499, -333, -163, -1977, -380, -232, -183, -607, -603, 3151, 1014, -365, 9, -216, -594, 1580, 1692, -483, -546, 0, 36, -232, 1510, -124, -2091, -11, 1133, -1596, -312, -1935, -377, -390, -102, -621, -1728, 350, -145, 362, 662, -1712, -146, -518, -1028, -1557, -648, -397, 1204, -312, -1971, 1496, -90, -121, };
const TfArray<1, int> tensor_dimension3 = { 1, { 64 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00037074898136779666, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[64*32] = { 
  17, -7, -13, -2, 13, -25, 21, 7, -15, 21, -17, 29, 1, -21, 8, 24, -18, 17, -20, -21, 26, -17, 25, -17, -39, -20, -17, -15, 0, 17, -6, 10, 
  10, 12, 7, -14, -32, 1, -22, -4, 6, -13, 15, -13, 26, 14, -14, 9, -7, 4, -9, 0, 30, -13, -10, 30, -1, -6, 21, -32, -13, 50, 57, 7, 
  -32, 24, -18, -27, 50, -10, -14, 21, 18, 18, -23, 20, -22, 19, -25, 13, 28, -15, -32, -12, -6, -28, -10, 6, -6, 16, -19, 40, 3, 29, -30, -3, 
  9, -1, 34, 14, -7, -22, -46, -7, 7, 27, -52, 10, -44, -16, -26, -39, -9, -6, -21, 18, -45, 12, -10, -4, 21, 6, -14, -50, -53, 20, -28, 2, 
  17, 15, 21, 36, -13, 12, 36, 27, 14, -7, 16, -14, -23, -9, 5, 35, -16, -4, 19, -26, -14, 16, 18, -19, 24, 7, -10, -37, -30, -8, -48, 0, 
  -6, 2, -20, 5, 10, -24, -3, -15, 12, -16, -3, 4, 11, -22, -5, 27, 9, 19, 4, 10, -8, 3, -8, 1, 26, 16, -12, -57, -32, -35, -35, -8, 
  21, -4, 17, -35, 28, -12, -33, -16, -13, -19, -12, -31, 22, -28, -27, 21, 18, 13, 3, -2, 10, -5, 0, 5, 8, 19, -8, -69, -36, -4, -25, -1, 
  -35, -28, -3, -2, 43, 11, -28, -67, 15, -10, -48, 1, -67, -23, 23, -20, 31, -23, -41, 2, -60, -3, -11, 36, -5, 16, -2, -10, -34, 33, 4, 8, 
  24, -24, -23, -4, -22, -6, 4, -11, -25, 12, 28, -20, 7, -20, -29, -3, 13, 5, -7, -2, -3, 28, -18, -5, 21, -35, -3, -11, 12, -27, 27, -9, 
  -28, 8, 2, 13, 17, -15, 25, -15, -25, 16, -15, -2, 22, 16, 17, 9, -12, 22, 1, 15, -20, 3, 22, 0, -3, -20, -18, 8, 12, -16, -20, -8, 
  -21, -35, 17, -6, -19, -9, -1, -16, 23, -3, 4, -34, -14, -19, 18, 21, -22, -3, -11, -11, 21, 6, -6, -25, -6, 4, -6, -28, 11, -39, -13, -11, 
  -5, -33, -32, -98, 12, -14, -33, -31, 7, -5, -4, 16, 105, -25, -15, -11, -127, 4, -3, 5, 100, 33, 88, 2, 18, -11, -24, -26, -23, -80, 84, -18, 
  -10, -2, -31, -40, 0, 15, 28, 4, -50, 14, 4, -37, -20, 26, -25, 17, -27, -17, -24, 28, -14, 18, 16, -5, -2, -27, -22, 18, 19, -48, -4, 24, 
  -27, 14, -33, 21, 13, 8, -20, 28, -12, 29, -26, -12, -28, -7, 8, 13, -19, 28, -17, 17, 22, -14, 13, -18, -7, -35, -15, -8, 4, 6, -6, 26, 
  -31, 10, 8, -1, -6, 23, 17, -6, -12, 28, -4, -19, 14, -21, 12, -7, -21, 22, -15, -36, -17, -9, 20, 0, 7, -31, 20, 8, -13, -1, -3, 6, 
  10, 31, -17, -21, -8, 8, -51, -16, 18, -3, -10, 9, -14, 3, 12, 17, 9, -29, -15, -2, -13, -10, -27, 23, 14, 23, 22, 34, 20, 38, 62, -10, 
  -15, 9, -11, -15, -25, 10, -4, 19, -38, -18, -13, -2, -27, 15, -23, 7, -9, -14, -19, -8, -1, -10, 20, -28, 8, -36, -25, -22, -16, 3, -17, -3, 
  -31, -29, -7, -31, -9, -24, -8, -14, 9, 12, -11, 4, 13, -24, -4, -22, 3, -16, -35, -39, -13, -10, -28, -27, 3, -18, 7, 9, -29, -19, 7, 3, 
  15, 24, -8, 4, 2, -24, 7, -2, 11, 13, -3, 13, -1, 0, 17, -42, 12, 19, -14, 15, 3, 2, -4, -3, -6, -32, -16, 43, 17, -6, -68, -11, 
  10, 23, 15, 16, 5, 15, -24, -3, 2, -9, 0, -1, -14, -7, -27, 12, -7, 8, -4, -29, -89, -31, -22, -3, -15, 28, 26, -20, -43, 29, -23, -14, 
  -43, -43, -1, -70, 9, -8, -1, 45, -22, 25, 36, 22, 9, 11, 19, -30, 13, -14, -21, 10, 42, 9, -33, 28, -16, -24, -1, -66, -59, 0, 19, -16, 
  -32, -34, -14, 1, -27, -26, -5, 25, -42, 25, -31, -10, -47, -1, -11, 27, -85, 28, -29, 11, 16, -49, 0, -16, 5, 34, -36, -29, -91, -28, 18, 29, 
  -29, 3, -29, 42, -24, 10, -44, -32, 13, 31, 5, -57, 10, -13, 10, -22, 4, 14, -36, -21, -39, -19, -24, -33, 17, 5, -26, 9, 9, 0, -65, -14, 
  -19, -24, -17, -12, 15, 20, -8, -33, -4, 24, -15, 20, 6, 18, -24, 11, -14, 18, -22, 6, 9, -14, 0, -23, -30, 10, 14, 0, -19, -20, 6, -35, 
  -35, -27, -7, -40, 22, 28, 47, -9, 11, -7, 5, -44, -34, 5, -16, 3, -35, 21, -15, 19, 69, -6, 78, -33, 20, 3, 17, -5, 1, -13, 44, -11, 
  -4, -1, -31, -19, 0, -25, -21, -6, 10, -11, 9, -8, 4, -25, 8, 5, -12, 11, -11, 19, -16, -19, -6, 10, -44, -34, -13, 0, 22, -3, -1, -15, 
  29, 12, 0, 18, 32, 28, -10, 19, 19, 7, 22, 58, -13, -24, -25, -2, 18, 22, -11, 2, 18, 11, 23, -10, -9, 21, -13, 49, 5, 63, -28, 15, 
  18, 22, -4, -2, -10, -39, -58, -9, -2, 30, -15, -20, 9, -11, 2, -18, 5, -23, 0, -4, -17, 18, 1, -20, -31, 25, -14, -55, -32, -4, -39, 19, 
  -6, 2, -6, 55, -15, 23, 2, -13, 20, -13, 2, 33, -4, -11, -26, 29, 4, 26, -8, 18, 27, -8, 18, 17, 16, 23, 0, -28, 7, -8, -12, -28, 
  4, -32, 1, -27, -27, 15, 1, -16, -16, 8, 2, -13, 26, 14, 16, 18, -24, -14, 15, 17, 57, -2, 17, 26, 8, -8, 0, -33, 17, 44, 61, -4, 
  13, -17, 11, -14, -9, -3, 9, 26, -17, 24, 20, 8, 22, -25, -28, -2, -3, -5, -12, 0, 45, -2, 21, -23, 12, 24, 6, 31, 9, -3, 32, 20, 
  -8, 7, -22, 3, 12, 5, -21, -14, -22, 5, -15, -20, -19, 18, 19, -20, 29, 27, -6, 28, -18, 18, 27, -12, 3, -26, -1, -22, 18, -9, -18, -1, 
  29, 5, 6, -23, 10, 5, -27, 27, 26, -6, -25, -16, -26, -28, -18, -10, -18, -13, 3, 19, -28, -27, 14, 5, 24, -8, 22, -17, 28, 29, 4, 30, 
  -21, 23, -30, 2, -21, 26, 4, 2, -28, -6, -18, 9, 14, 13, 12, -28, -20, 11, -15, -22, -2, 5, -4, 8, -3, -37, -2, 3, -3, -15, 3, -24, 
  13, -20, -1, 30, -24, -21, 4, 13, -17, 22, -10, -11, 16, -11, 4, -15, 9, -6, -23, -4, -10, -26, 19, 19, -22, 3, 20, -70, -32, -2, -49, -24, 
  -29, -7, -18, -5, -20, 16, 7, -23, 16, -1, -6, -1, 3, 3, -13, -32, -21, -29, -9, -8, -21, -23, 23, -4, -14, -7, 10, 0, 4, -9, -12, 16, 
  12, 10, -15, -57, -7, 14, -28, 18, 22, 19, 8, -3, 27, -11, 7, 18, 20, 2, -3, -15, -4, -11, -17, -8, 21, 12, -23, 57, 3, 37, -3, 18, 
  -2, -2, 3, -1, -18, 10, -5, 7, -2, -3, -11, 13, -23, 20, 16, -14, 7, 13, 14, 32, -3, 6, 9, 6, 3, -19, 13, 14, -34, 6, -19, -21, 
  -2, -23, -6, 56, 17, 25, 53, -20, -11, -4, 22, 36, -24, 16, -20, 13, -21, -11, 34, -5, 14, -3, -22, -14, -28, 17, 31, 47, 19, 15, 12, 8, 
  -29, -21, 10, 8, 23, 13, -5, -8, 26, -28, 40, 15, 5, 17, 20, 17, 31, 15, -8, -13, 21, 6, 10, 21, 3, -7, -14, 21, 27, 21, 12, -9, 
  0, 23, -8, 2, -1, 22, -23, 10, -12, -1, 17, -5, -22, -19, -10, -24, 9, 3, -18, 3, 14, -13, 23, -19, -12, -40, -9, -2, 11, -43, -13, 14, 
  19, -13, -7, -18, 14, -22, -29, 27, 6, 0, 15, -18, -21, -20, 2, -14, -18, 19, -16, 8, 18, 21, -9, 8, 15, 26, 1, 39, 14, 3, 31, 9, 
  11, -42, -9, 16, 12, 19, 3, 7, -33, 18, 9, 12, 2, -18, 24, 1, 8, 5, -27, 7, -6, -6, -22, -29, 5, -42, -5, 7, -13, -7, -22, -19, 
  -14, 24, -34, -19, 50, -16, 4, -2, 11, 0, -18, -22, 0, -13, 18, 32, -18, 15, 23, -5, 33, -13, 10, -25, -30, 6, -20, 12, -5, 50, 47, 7, 
  -1, 22, -2, -18, -8, 16, -12, -6, 10, -20, 19, 61, -8, -25, 9, 8, 19, 1, 17, -18, -59, 17, -24, -16, 16, -8, 23, -8, 3, -19, -67, 3, 
  6, 23, 23, 56, -26, -9, 5, 13, -16, 27, 11, 52, 9, -20, -14, -13, 28, 2, 21, -23, 7, 18, -19, 25, 8, 14, 24, 40, 35, 16, -25, 23, 
  10, -1, 29, -60, -17, 12, -19, -10, 14, -12, -44, -33, 28, -16, -18, 34, 30, -22, -26, 8, 13, -18, 35, 46, 1, 5, -8, 13, -20, 25, 36, 2, 
  14, -32, -24, 23, 24, -9, 9, 10, 9, -6, 9, 35, -40, -24, 0, 27, -11, -22, 7, 14, -57, 17, -26, 3, 9, 19, -18, 58, 28, -3, -6, 0, 
  -18, -27, 14, -31, -25, 5, -6, -16, -10, -7, -24, -2, -25, -10, -25, -26, 19, -4, 10, -23, -4, 20, -16, 0, 6, -21, -19, 0, -22, 29, -15, -7, 
  11, 12, -36, 8, 78, -21, -33, 5, -6, 17, -23, 21, -9, -28, -29, 5, 12, 23, -34, 20, -4, 0, -12, -25, -11, 3, -20, -25, 6, -3, 40, -25, 
  11, -57, -11, -6, 4, -28, 16, -4, -17, -19, 39, 54, -23, 4, 17, -11, 7, -1, 27, 27, 36, 6, 41, 20, 10, -9, 1, 1, 21, 0, 18, -7, 
  -33, -25, 15, -73, -27, -29, 0, 22, 18, -36, 13, 8, -11, -18, -18, 14, -2, 26, -7, 15, 21, -12, -9, 16, 24, 16, -13, 41, 12, 4, 38, -28, 
  19, 18, -6, -25, -1, -19, 8, -4, -30, -25, -22, 1, 22, -11, 5, -18, 21, -29, -23, -14, 4, 1, 14, 5, -30, -30, 19, 14, -23, 7, -11, 16, 
  -12, 12, 6, -3, 5, 8, -20, -10, -26, -5, -16, 2, -8, 17, -26, -21, 10, -18, 3, 19, 8, -30, -55, -10, -56, 0, -1, -25, -36, -19, 13, -26, 
  0, 6, 2, -31, -19, -39, -33, -20, 21, -23, -22, -8, 20, -4, -24, -28, -1, -7, -28, 30, 31, 4, 1, 2, -7, 20, -3, 10, -34, -8, 1, 17, 
  -6, 26, 19, -30, 12, -12, 7, 9, 16, -25, -15, 14, 0, 23, 26, 25, 6, 9, 28, -9, -7, 15, 11, 26, 9, -5, 23, 2, 36, 21, -22, -8, 
  -3, -22, 16, 16, 5, 2, 45, -1, 2, 28, 17, -2, 2, 5, -33, -8, -42, 16, -23, -35, -10, 22, -33, -21, -44, -21, -7, 13, -3, 30, 17, -30, 
  48, 61, -38, -4, 7, -10, 27, -26, -1, 28, 5, -39, 6, 3, 6, 45, -21, 21, 11, 9, 16, 15, -67, -32, -16, -15, 66, -32, -5, 1, -1, 4, 
  8, 1, -7, -6, 35, 25, -5, 16, 13, -9, 10, -31, -4, -7, -7, -20, -19, -9, -29, -20, 0, 25, -26, 14, 11, -6, -16, -20, -43, 31, 29, -28, 
  17, -27, -25, -43, -26, -14, 22, -5, -26, -17, 14, -19, -8, -20, -26, 0, -24, 19, 17, 23, -29, -35, -25, 13, 11, -5, -40, -23, -17, -15, 14, -5, 
  -26, -12, -19, -20, -11, -36, 1, 10, 20, 21, 1, -16, 0, -24, 16, -25, 4, -8, 1, 30, -10, 2, 7, 13, 27, 28, -15, -9, -1, 24, 38, -6, 
  9, -25, -23, 28, -21, -20, -17, -29, -17, 3, -35, -4, 21, -22, -13, -19, -18, -5, 23, -27, -22, 10, -13, -18, 5, 17, 9, -30, -2, -11, 34, -5, 
  21, 2, 0, -17, -14, -27, 20, -9, 26, -6, -21, -55, -18, -13, 29, -2, -2, 8, 3, 14, -10, 19, 16, -2, -22, -26, -24, 4, 10, 16, -13, 12, 
  23, -30, -3, -9, -34, -24, -5, -21, 5, -23, 2, 7, -28, 15, 10, -7, -27, 17, -33, 19, -8, 3, -15, -7, -16, -8, 21, 3, -28, -8, -24, -12, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 64,32 } };
const TfArray<1, float> quant4_scale = { 1, { 0.008593238890171051, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[32] = { -91, -235, -853, 2515, -966, -292, -394, -200, -2731, -145, -114, -49, 167, -48, -259, -316, -2563, 0, 141, -131, 351, -440, 361, -2613, -984, 341, -183, -974, -300, -2592, -231, -207, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00041325707570649683, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[32*16] = { 
  24, 56, -38, -6, -3, 0, -47, 50, 20, 7, -61, 28, 2, 59, 26, -14, 
  -33, -10, -12, -28, -43, -29, 49, 38, 56, 19, -43, -14, 10, 37, -54, 56, 
  -13, -26, -3, 2, 66, 49, 34, 0, -50, 29, -24, 44, 59, -38, -73, 47, 
  34, 23, 43, -76, 13, -15, 2, -37, -45, -37, 46, 35, 52, 8, 1, -59, 
  -26, -70, -44, 23, -50, -28, -20, 18, 34, 80, -118, -32, -52, 25, 50, 71, 
  -51, 12, -35, -54, -55, -21, 49, -57, -41, 10, -20, -68, -21, -3, 33, -29, 
  54, 24, -83, -12, 29, 35, -19, 15, -23, -69, -32, -50, -41, 30, -58, -44, 
  -9, 2, -57, 52, 36, 50, 45, 32, 9, -47, 56, 63, 3, -11, 47, 29, 
  36, 42, -5, 44, -24, -51, 53, -68, -14, 32, -21, -38, 19, 48, -23, 18, 
  26, 20, -38, 34, -16, -11, 2, -20, -5, -39, -30, -36, -13, -57, -43, -21, 
  -45, -28, 23, 47, -61, -15, -30, -47, -35, -74, -63, -35, 2, -14, -2, 35, 
  -66, -50, 50, -6, -31, 20, 65, -4, -19, -127, -108, -42, 61, 23, 37, 18, 
  -56, -79, -38, 46, 32, -57, -58, -56, 36, 31, 21, -67, -62, -38, 1, -8, 
  8, -18, -80, -56, 41, -31, -66, -35, -30, 42, 31, -46, -12, 2, 46, 8, 
  35, 25, -36, -5, -8, 59, -7, 36, 54, -7, -7, -18, 61, -19, -63, 1, 
  41, -17, -15, -43, -2, 36, 7, 6, -39, 28, -72, 11, 31, 14, 8, -17, 
  28, 49, -1, 35, 14, -10, 13, -64, 33, 14, -51, 0, 32, 35, -6, -72, 
  53, 47, -54, 28, -14, 3, 65, 64, 10, -64, -43, -1, 27, -18, -57, -27, 
  24, 11, -23, 32, 5, 41, -56, 65, 30, -46, 4, -1, 49, 2, 30, 58, 
  -42, -37, -29, 24, -58, 52, -35, 19, 2, -36, -27, 16, -42, -15, -46, -23, 
  -39, -98, -67, 13, -20, -41, 40, -14, 45, -35, 60, -71, -32, -47, 42, -70, 
  40, 35, -95, 45, 33, -26, 51, -19, 67, 11, -14, 23, 54, -18, 0, -68, 
  -2, 35, -24, 7, -48, -58, -5, 39, -64, 40, 9, -57, -17, -30, 24, -32, 
  55, -75, 51, 34, 52, 62, 50, 38, 2, -11, 1, 2, 59, -66, -47, 12, 
  -56, 37, -26, 34, -41, 42, -18, 63, -33, 30, 23, -22, -67, -6, -79, -31, 
  -40, 22, 31, 26, -26, -39, 34, 24, -40, 53, 18, 43, 65, -53, 49, 41, 
  -34, 16, -42, -22, -55, -9, -57, 19, -4, 23, 25, 54, 18, 40, 11, 29, 
  27, 111, 9, -43, -39, 8, -66, 24, -7, 18, -60, 10, 50, -53, -49, -72, 
  32, 89, -10, -19, -10, -28, 38, -22, 35, 0, -59, 42, -44, -23, 31, 17, 
  -9, -20, 51, -6, 29, 2, -56, -51, 11, 14, -69, 38, 6, -65, -54, -40, 
  7, -99, 24, -24, 56, 14, -3, -46, -66, 70, -33, -107, -29, -64, 61, -64, 
  39, -26, -40, 28, -11, -18, -41, 24, -52, -53, -14, 20, -30, -51, 49, 17, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 32,16 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0051959073171019554, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[16] = { 0, -32, -101, -251, 0, 0, 0, 0, 0, -239, 206, 67, 0, -47, -25, -83, };
const TfArray<1, int> tensor_dimension7 = { 1, { 16 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0036820180248469114, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[16*14] = { 
  0, 1, -42, 26, -27, 12, 35, -38, -5, -10, 14, 16, 21, 3, 
  -59, -11, -61, -54, -19, -13, 43, 35, -44, 36, 11, 8, 10, -25, 
  18, -64, -44, 11, -27, 5, 55, -28, 20, 28, 39, -5, 14, 9, 
  -44, -12, 28, 30, 28, 48, 85, -8, 22, -1, 2, 13, 14, 127, 
  35, -6, -28, 0, -7, -34, 21, -10, -26, -26, -20, -35, -38, -10, 
  -13, -3, 21, -24, -3, -15, 7, -13, -37, 0, -17, 40, -6, 8, 
  21, -6, -11, -24, -42, -27, -23, 4, -20, 7, -15, -4, -15, 42, 
  32, 23, 33, -32, -13, 38, 25, -14, -5, -17, -14, -37, 30, -3, 
  24, 9, -10, -17, -14, -37, -33, 12, -15, -42, -4, 25, -1, -38, 
  -29, 64, 35, 42, -12, 74, 60, -1, -21, 25, -39, -7, -28, 55, 
  43, 7, -38, 23, 5, -55, -117, 15, -28, 3, -14, -9, -33, -117, 
  -20, -57, -36, -11, -53, -33, -12, -7, 0, 5, 29, 35, 35, -59, 
  -20, 42, 7, 36, -3, 26, 27, 36, -28, -31, -35, -7, -13, 15, 
  -14, 2, -13, -17, 19, 35, 38, -18, 1, 17, -27, -55, -40, 37, 
  30, 1, -25, -40, -50, 3, -7, -21, 29, -11, 13, 24, -2, 17, 
  -17, -9, -1, 11, -26, -30, 2, -9, 17, -22, -3, -16, -9, 69, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 16,14 } };
const TfArray<1, float> quant8_scale = { 1, { 0.010205592960119247, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,16 } };
const TfArray<1, float> quant9_scale = { 1, { 0.079535111784934998, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,32 } };
const TfArray<1, float> quant10_scale = { 1, { 0.043144267052412033, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,64 } };
const TfArray<1, float> quant11_scale = { 1, { 0.040405131876468658, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,4 } };
const TfArray<1, float> quant12_scale = { 1, { 0.079676911234855652, } };
const TfArray<1, int> quant12_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,4 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,8,7 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,5 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,4,3 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,2,1 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension0, 14, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension11, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension12, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension13, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[5] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[5] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 14, };
const size_t tflNodes_subgraph_index[] = {0, 5, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  13, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 14;
  for (size_t i = 0; i < 14; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 5; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
